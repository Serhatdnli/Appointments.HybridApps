@typeparam T
@using Appointments.Utility
@using Shared.Extensions
@using Appointments.Components.Components

<div class="row">
	<div class="col-@((12-ColumnCount)/ 2)"></div>
	<div class="col-@ColumnCount">
		

		<table class="table table-striped table-hover">
			<thead>
				<tr>

					@foreach (var head in FilterItem.GetHeads())
					{
						<th scope="col">@head</th>
					}
					@if (isOperationArea)
					{
						<th scope="col">Operations</th>
					}
				</tr>
			</thead>
			<tbody>

				<tr>
					
					@if (isFilter)
					{
						@foreach (var filterableItem in FilterItem.GetFilterable())
						{
					
							
							var propType = typeof(T).GetProperty(filterableItem).PropertyType;


							<td>
								<FilterInput propType="@propType" UpdatePropertyMethod="@UpdateProperty" propertyName="@filterableItem"/>
							</td>

						}
						<td>
							<Button Color="ButtonColor.Success" @onclick="() => {ApplyFilterMethod.InvokeAsync();}">
								<i class="fa-solid fa-circle-play"></i>
							</Button>
						</td>
					
					}

				</tr>

				@foreach (var data in ModelList)
				{
					<tr>
						@foreach (var head in data.GetHeads())
						{
							<td>@data.GetType().GetProperty(head).GetValue(data)</td>
						}

						@if (isOperationArea)
						{
							<td>
								<div class="d-flex align-items-center">
									@if (isDeleteButton)
									{
										<Button Color="ButtonColor.Danger" @onclick="() =>  DeleteMethod.InvokeAsync(data)" class="me-2">
											<i class="bi bi-trash"></i>
										</Button>
									}
									@if (isUpdateButton)
									{
										<a class="btn btn-primary" href="@UpdatePath/@data.GetType().GetProperty("Id").GetValue(data)">
											<i class="fa-solid fa-pen-to-square"></i>
										</a>
									}
								</div>

							</td>
						}

					</tr>

				}
			</tbody>
		</table>
	</div>

</div>

@if (isPagination)
{
	<div class="justify-content-center d-flex">
		<div class="align-items-center">

			<nav aria-label="Page navigation example">
				<ul class="pagination">


					<li class="page-item @(CurrentPage == 0 ? "disabled" : "")">
						<a class="page-link @(CurrentPage == 0 ? "disabled-link" : "")" @onclick="() => GoToPageMethod.InvokeAsync(CurrentPage - 1)" disabled="@(CurrentPage == 0)">Önceki</a>
					</li>

				@* 	[current page : @CurrentPage]
					last page : @LastPage] *@

					@for (int i = CurrentPage - 2; i < LastPage + 1; i++)
					{
						@if (i < 0)
						{
							continue;
						}

						@if (Math.Abs(i - CurrentPage) < 4)
						{
							var pageNumber = i;
							<li class="page-item @(CurrentPage == i ? "active" : "")">
								<a class="page-link" @onclick="() => GoToPageMethod.InvokeAsync(pageNumber)">@(i + 1)</a>
							</li>
						}
					}


					<li class="page-item @(CurrentPage == LastPage ? "disabled" : "")">
						<a class="page-link @(CurrentPage == LastPage ? "disabled-link" : "")" @onclick="() => GoToPageMethod.InvokeAsync(CurrentPage + 1)" disabled="@(CurrentPage == LastPage)">Sonraki</a>
					</li>
				</ul>
			</nav>
		</div>

	</div>
}


	